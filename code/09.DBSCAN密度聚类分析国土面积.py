# coding=utf-8
#
# # 源数据
# 密度聚类在样本比较多时更容易看出效果

'''
国家        面积        人口             GDP     人均GDP

中国        9670250     1392358258      99960   7179
印度        2980000     1247923065      18707   1505
美国        9629091     317408015       167997  53101
巴西        8514877     201032714       22429   11311
日本        377873      127270000       49015   38491
澳大利亚    7692024     23540517        15053   64863
加拿大      9984670     34591000        18251   51990
俄罗斯      171244422   143551289       21180   14819
泰国        513115      67041000        3871.6  5674
柬埔寨      181035      14805358        156.5   1016
韩国        99600       50400000        12218   24329
朝鲜        120538      24052231        355     1476
'''

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import DBSCAN


X = [
    [9670250,  1392358258],
    [2980000,  1247923065],
    [9629091,  317408015],
    [8514877,  201032714],
    [377873,  127270000],
    [7692024,  23540517],
    [9984670,  34591000],
    [171244422,  143551289],
    [513115,  67041000],
    [181035,  14805358],
    [99600,  50400000],
    [120538,  24052231]
]

X = np.array(X)

# 做归一化
# 归一化问题s为了解决由于维度量纲或单位不同所产生的距离计算问题而进行的权重调整，这是数据挖掘必需要的工作，
# 一般放在数据准备阶段，目的是把两个不同维度的数据都投影（延展或压缩）到 10000 为最大值的正方形区域。

# 如果这里不做归一化处理，在本例中，由于人口的数字（万人）比面积（万平方千米）大太多而导致由于人口差距产生的距离比重太大，失去多个维度聚类的意义


a = X[:, :1]/17075400.0*10000
b = X[:, 1:]/1392358258.0*10000
X = np.concatenate((a, b), axis=1)

# 将训练数据和对应分类放入分类器训练
# 这里没有出现噪点是因为 min_samples 设置成 1

# 这里的两个参数，eps 和 min-samples。
# eps 的含义是设置一个阈值，根据密度向外扩展的过程中如果发现这个阈值距离范围内找不到向量，则认为这个簇类已经查找完毕。

# 本例中 eps 设置 2000 是因为，归一化以后所有变量都落在 10000 * 10000 的区间单位，设置 2000 能够充分将各个簇类分开。

# min-samples 的含义是告诉算法聚簇最小应该拥有的向量个数。如果设置为 3，则算法会认为所有小于 3 个向量的聚类为噪声点，就不会显示。

cls = DBSCAN(eps=2000, min_samples=1).fit(X)

# 类簇的数量
n_clusters = len(set(cls.labels_))

# X 中每一项所属分类的一个列表
cls.labels_

# 画图
markers = ['^', 'x', 'o', '*', '+']
for i in range(n_clusters):
    my_members = cls.labels_ == i
    plt.scatter(X[my_members, 0], X[my_members, 1], s=60,
                marker=markers[i], c='b', alpha=0.5)
plt.title('dbscan')
plt.show()
